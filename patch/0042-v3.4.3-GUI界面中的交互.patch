From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yanbing Zhao <zzzz@mail.ustc.edu.cn>
Date: Fri, 7 Oct 2016 20:12:03 +0800
Subject: v3.4.3


diff --git a/src/main/java/com/github/ustc_zzzz/fmltutor/client/gui/GuiContainerDemo.java b/src/main/java/com/github/ustc_zzzz/fmltutor/client/gui/GuiContainerDemo.java
index b1e3cf8..7ca797e 100644
--- a/src/main/java/com/github/ustc_zzzz/fmltutor/client/gui/GuiContainerDemo.java
+++ b/src/main/java/com/github/ustc_zzzz/fmltutor/client/gui/GuiContainerDemo.java
@@ -1,5 +1,7 @@
 package com.github.ustc_zzzz.fmltutor.client.gui;
 
+import java.io.IOException;
+
 import com.github.ustc_zzzz.fmltutor.FMLTutor;
 import com.github.ustc_zzzz.fmltutor.inventory.ContainerDemo;
 import com.github.ustc_zzzz.fmltutor.item.ItemLoader;
@@ -9,6 +11,8 @@ import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.inventory.GuiContainer;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.resources.I18n;
+import net.minecraft.init.Items;
+import net.minecraft.inventory.Slot;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.relauncher.Side;
@@ -23,11 +27,14 @@ public class GuiContainerDemo extends GuiContainer
     private static final int BUTTON_UP = 0;
     private static final int BUTTON_DOWN = 1;
 
+    private Slot ironSlot;
+
     public GuiContainerDemo(ContainerDemo inventorySlotsIn)
     {
         super(inventorySlotsIn);
         this.xSize = 176;
         this.ySize = 133;
+        this.ironSlot = inventorySlotsIn.getIronSlot();
     }
 
     @Override
@@ -83,6 +90,28 @@ public class GuiContainerDemo extends GuiContainer
         });
     }
 
+    @Override
+    protected void actionPerformed(GuiButton button) throws IOException
+    {
+        ItemStack stack = this.ironSlot.getStack();
+        int amount = stack == null ? 0 : stack.stackSize;
+
+        switch (button.id)
+        {
+        case BUTTON_DOWN:
+            amount = (amount + 64) % 65;
+            break;
+        case BUTTON_UP:
+            amount = (amount + 1) % 65;
+            break;
+        default:
+            super.actionPerformed(button);
+            return;
+        }
+
+        this.ironSlot.putStack(amount == 0 ? null : new ItemStack(Items.iron_ingot, amount));
+    }
+
     @Override
     protected void drawGuiContainerBackgroundLayer(float partialTicks, int mouseX, int mouseY)
     {
diff --git a/src/main/java/com/github/ustc_zzzz/fmltutor/inventory/ContainerDemo.java b/src/main/java/com/github/ustc_zzzz/fmltutor/inventory/ContainerDemo.java
index f4bb3f1..18a5896 100644
--- a/src/main/java/com/github/ustc_zzzz/fmltutor/inventory/ContainerDemo.java
+++ b/src/main/java/com/github/ustc_zzzz/fmltutor/inventory/ContainerDemo.java
@@ -3,6 +3,7 @@ package com.github.ustc_zzzz.fmltutor.inventory;
 import com.github.ustc_zzzz.fmltutor.item.ItemLoader;
 
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.init.Items;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.Slot;
 import net.minecraft.item.ItemStack;
@@ -13,14 +14,73 @@ public class ContainerDemo extends Container
 {
     private ItemStackHandler items = new ItemStackHandler(4);
 
+    protected Slot goldSlot;
+    protected Slot diamondSlot;
+    protected Slot emeraldSlot;
+    protected Slot ironSlot;
+
     public ContainerDemo(EntityPlayer player)
     {
         super();
 
-        for (int i = 0; i < 4; ++i)
+        this.addSlotToContainer(this.goldSlot = new SlotItemHandler(items, 0, 38 + 0 * 32, 20)
         {
-            this.addSlotToContainer(new SlotItemHandler(items, i, 38 + i * 32, 20));
-        }
+            @Override
+            public boolean isItemValid(ItemStack stack)
+            {
+                return stack != null && stack.getItem() == Items.gold_ingot && super.isItemValid(stack);
+            }
+
+            @Override
+            public int getItemStackLimit(ItemStack stack)
+            {
+                return 16;
+            }
+        });
+
+        this.addSlotToContainer(this.diamondSlot = new SlotItemHandler(items, 1, 38 + 1 * 32, 20)
+        {
+            {
+                this.putStack(new ItemStack(Items.diamond, 64));
+            }
+
+            @Override
+            public boolean canTakeStack(EntityPlayer playerIn)
+            {
+                return false;
+            }
+        });
+
+        this.addSlotToContainer(this.emeraldSlot = new SlotItemHandler(items, 2, 38 + 2 * 32, 20)
+        {
+            @Override
+            public boolean isItemValid(ItemStack stack)
+            {
+                return stack != null && stack.getItem() == Items.emerald && super.isItemValid(stack);
+            }
+
+            @Override
+            public void onSlotChanged()
+            {
+                ItemStack stack = this.getStack();
+                int amount = stack == null ? 64 : 64 - stack.stackSize;
+                ContainerDemo.this.diamondSlot.putStack(amount == 0 ? null : new ItemStack(Items.diamond, amount));
+                super.onSlotChanged();
+            }
+        });
+
+        this.addSlotToContainer(this.ironSlot = new SlotItemHandler(items, 3, 38 + 3 * 32, 20)
+        {
+            {
+                this.putStack(new ItemStack(Items.iron_ingot, 64));
+            }
+
+            @Override
+            public boolean canTakeStack(EntityPlayer playerIn)
+            {
+                return false;
+            }
+        });
 
         for (int i = 0; i < 3; ++i)
         {
@@ -36,10 +96,81 @@ public class ContainerDemo extends Container
         }
     }
 
+    public Slot getIronSlot()
+    {
+        return this.ironSlot;
+    }
+
+    @Override
+    public void onContainerClosed(EntityPlayer playerIn)
+    {
+        super.onContainerClosed(playerIn);
+
+        if (playerIn.isServerWorld())
+        {
+            ItemStack goldStack = this.goldSlot.getStack();
+            if (goldStack != null)
+            {
+                playerIn.dropPlayerItemWithRandomChoice(goldStack, false);
+                this.goldSlot.putStack(null);
+            }
+            ItemStack emeraldStack = this.emeraldSlot.getStack();
+            if (emeraldStack != null)
+            {
+                playerIn.dropPlayerItemWithRandomChoice(emeraldStack, false);
+                this.emeraldSlot.putStack(null);
+            }
+        }
+    }
+
     @Override
     public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
     {
-        return null;
+        Slot slot = inventorySlots.get(index);
+
+        if (slot == null || !slot.getHasStack())
+        {
+            return null;
+        }
+
+        ItemStack newStack = slot.getStack(), oldStack = newStack.copy();
+
+        boolean isMerged = false;
+
+        if (index == 0 || index == 2)
+        {
+            isMerged = mergeItemStack(newStack, 4, 40, true);
+        }
+        else if (index >= 4 && index < 31)
+        {
+            isMerged = !goldSlot.getHasStack() && newStack.stackSize <= 16 && mergeItemStack(newStack, 0, 1, false)
+                    || !emeraldSlot.getHasStack() && mergeItemStack(newStack, 2, 3, false)
+                    || mergeItemStack(newStack, 31, 40, false);
+        }
+        else if (index >= 31 && index < 40)
+        {
+            isMerged = !goldSlot.getHasStack() && newStack.stackSize <= 16 && mergeItemStack(newStack, 0, 1, false)
+                    || !emeraldSlot.getHasStack() && mergeItemStack(newStack, 2, 3, false)
+                    || mergeItemStack(newStack, 4, 31, false);
+        }
+
+        if (!isMerged)
+        {
+            return null;
+        }
+
+        if (newStack.stackSize == 0)
+        {
+            slot.putStack(null);
+        }
+        else
+        {
+            slot.onSlotChanged();
+        }
+
+        slot.onPickupFromSlot(playerIn, newStack);
+
+        return oldStack;
     }
 
     @Override
